# -*- coding: utf-8 -*-
"""Language Interpretor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s9F1A-DVYDVEns3hS23le8wPRDKDnDsj
"""

# Step 1: Install necessary libraries

# Step 2: Import libraries
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report

# Step 3: Prepare the dataset

# Open the file and read the lines
with open('/home/nnm5qe/commands_dataset.txt', 'r') as file:
    lines = file.readlines()

# Process each line and store in an array
data = [tuple(line.strip().split(',')) for line in lines]

# Convert the second element of each tuple to an integer
data = [(text, int(label)) for text, label in data]

# Print the array
#print(data)

import random
# Shuffle the data
random.shuffle(data)

# Print the jumbled data
# print(data)

# Split data into texts and labels
texts, labels = zip(*data)

# Step 4: Preprocess the text
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(texts)
y = np.array(labels)

# Step 5: Train the model
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LogisticRegression()
model.fit(X_train, y_train)

# Step 6: Evaluate the model
y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred))

# Function to classify new text
def classify_text(text):
    text_vector = vectorizer.transform([text])
    prediction = model.predict(text_vector)
    return prediction[0]

def input_classifier():
    inp_text = input('Tell me what you would like me to do.\n')
    return classify_text(inp_text)

# Test the function
# text = input_classifier()
# print(text)